// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import common "github.com/uber/aresdb/memstore/common"

import mock "github.com/stretchr/testify/mock"

// RedologManager is an autogenerated mock type for the RedologManager type
type RedologManager struct {
	mock.Mock
}

// CheckpointRedolog provides a mock function with given fields: cutoff, redoFileCheckpointed, batchOffset
func (_m *RedologManager) CheckpointRedolog(cutoff uint32, redoFileCheckpointed int64, batchOffset uint32) error {
	ret := _m.Called(cutoff, redoFileCheckpointed, batchOffset)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint32, int64, uint32) error); ok {
		r0 = rf(cutoff, redoFileCheckpointed, batchOffset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *RedologManager) Close() {
	_m.Called()
}

// IsDone provides a mock function with given fields:
func (_m *RedologManager) IsDone() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Start provides a mock function with given fields: redoFilePersisited, offsetPersisted
func (_m *RedologManager) Start(redoFilePersisited int64, offsetPersisted uint32) error {
	ret := _m.Called(redoFilePersisited, offsetPersisted)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, uint32) error); ok {
		r0 = rf(redoFilePersisited, offsetPersisted)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMaxEventTime provides a mock function with given fields: eventTime, redoFile
func (_m *RedologManager) UpdateMaxEventTime(eventTime uint32, redoFile int64) {
	_m.Called(eventTime, redoFile)
}

// WaitForRecoveryDone provides a mock function with given fields:
func (_m *RedologManager) WaitForRecoveryDone() {
	_m.Called()
}

// WriteUpsertBatch provides a mock function with given fields: upsertBatch
func (_m *RedologManager) WriteUpsertBatch(upsertBatch *common.UpsertBatch) error {
	ret := _m.Called(upsertBatch)

	var r0 error
	if rf, ok := ret.Get(0).(func(*common.UpsertBatch) error); ok {
		r0 = rf(upsertBatch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
